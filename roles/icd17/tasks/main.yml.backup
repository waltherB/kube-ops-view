---
- name: List Role
  debug: var=rolescfme

- name: OCP Project Name
  debug: var=redhat_container_test_project

- name: OCP Application Name
  debug: var=app_name

- name: OCP Root Password
  debug: var=root_password 

- name: OCP Domain hailstorm_dns_domain 
  debug: var=hailstorm_dns_domain 

- name: OCP Destination Ping
  debug: var=test_target_IP

- name: OCP Image Name
  debug: var=ocp_image

#- name: login to OpenShift
#  shell: "/root/oc login --insecure-skip-tls-verify=true  https://openshift.{{ hailstorm_dns_domain }}/"
#  shell: "/root/oc login --insecure-skip-tls-verify=true --token=_2weB6JERB70OdFmzfHcBBKv0wjoVxzT-qK3YPwAFXc  https://openshift.{{ hailstorm_dns_domain }}/"

- name: check existing projects
  shell: "/root/oc get projects | awk '{ print $1 }'"
  register: projects
  changed_when: false
  tags: project

- name: Create Red Hat container project
  shell: "/root/oc new-project {{ redhat_container_test_project }} --description='Red Hat Container Test Demo'"
  when: "redhat_container_test_project not in projects.stdout_lines"
  tags: project

- name: Resetting Red Hat container project to empty state
  shell: "/root/oc delete all --all -n {{ redhat_container_test_project }}"
  when: "redhat_container_test_project in projects.stdout_lines"

- name: assign anyuid to default service account
  shell: "/root/oc adm policy add-scc-to-user anyuid -z default -n {{ redhat_container_test_project }}"
  changed_when: false
  tags: project

- name: assign admin permissions to user1
  shell: "/root/oc adm policy add-role-to-user admin user1 -n {{ redhat_container_test_project }}"
  changed_when: false
  tags: project

#- name: Create OpenShift new-build based on RHEL7.4 base image
#  shell: "/root/oc new-build -D 'FROM registry.access.redhat.com/rhel7.4:latest\nRUN yum install -y iputils net-tools\nCMD sleep infinity & wait' --name={{ app_name }} -n {{ redhat_container_test_project }} -l app={{ app_name }}"
#  register: command_result
#  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
#  changed_when: "'exists' not in command_result.stderr"

- name: Create OpenShift new-build based on RHEL7.4 base image
  shell: "/root/oc new-build -D 'FROM registry.access.redhat.com/rhel7.4:latest\nUSER root\nRUN yum install -y iputils net-tools httpd\nEXPOSE 80\nCMD exec /usr/sbin/apachectl -DFOREGROUND' --name={{ app_name }} -n {{ redhat_container_test_project }} -l app={{ app_name }}"
  register: command_result
#  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"


- name: Create OpenShift application from previously created images
  shell: "/root/oc new-app -n {{ redhat_container_test_project }} {{ app_name }}:latest --allow-missing-imagestream-tags -l app={{ app_name }}"
  register: command_result
#  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"

- name: Expose the dc
  shell: "/root/oc expose dc {{ app_name }} --port=80 -n {{ redhat_container_test_project }}"
  register: command_result
#  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"

- name: Expose the service
  shell: "/root/oc expose svc {{ app_name }} -n {{ redhat_container_test_project }}"
  register: command_result
#  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"

- name: Output last command stdout
  debug: 'msg="{{ command_result.stdout }}"'


- name: Output last command  stderr 
  debug: 'msg="{{ command_result.stderr }}"'

- name: get git pod id
  shell: /root/oc get pods -n {{ redhat_container_test_project }} | grep {{ app_name }} | awk '{ print $1 }'
  register: gitPod
  changed_when: false

- name: Exec connectivity test
  shell: /root/oc exec {{ gitPod.stdout }} -- bash -c "ping -c 1 {{ test_target_IP }}"
  register: command_result
  failed_when: "'Unknown' in command_result.stderr and command_result.rc != 0"

- name: Dump connectivity results
  debug: 'msg="{{ command_result.stdout }}"'
